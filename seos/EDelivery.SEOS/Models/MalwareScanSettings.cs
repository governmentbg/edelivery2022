using System;
using System.Linq;
using EDelivery.SEOS.DataContracts;
using EDelivery.SEOS.MalwareService;

namespace EDelivery.SEOS.Models
{
    public class MalwareScanSettings
    {
        public int Id { get; set; }
        public string MalwareId { get; set; }
        public bool? IsMalicious { get; set; }
        public byte Status { get; set; }
        public DateTime? StatusDate { get; set; }
        public string Message { get; set; }
        public string InnerMessage { get; set; }
        public decimal? ElapsedTimeSeconds { get; set; }
        public MalwareScanErrorReasonEnum ErrorReason { get; set; }

        public bool IsSuccessfulScan { get; set; }

        public MalwareScanSettings()
        {
            this.MalwareId = String.Empty;
            this.IsMalicious = false;
            this.Status = (byte)EvaluationStatus.Error;
            this.StatusDate = DateTime.Now;
            this.Message = String.Empty;
            this.InnerMessage = String.Empty;
            this.ElapsedTimeSeconds = 0;
            this.ErrorReason = MalwareScanErrorReasonEnum.NoError;
            this.IsSuccessfulScan = false;
        }

        public MalwareScanSettings(MalwareScanErrorReasonEnum errorReason, string errorMessage)
            : this(null, errorReason)
        {
            this.ErrorReason = errorReason;
            this.InnerMessage = errorMessage;
        }

        public MalwareScanSettings(Evaluation malwareScanResult, MalwareScanErrorReasonEnum errorReason)
            : this(malwareScanResult)
        {
            this.ErrorReason = errorReason;

            switch (errorReason)
            {
                case MalwareScanErrorReasonEnum.ApiNotAccessible:
                    this.Message = "Липса на достъп!" +
                        " Документът не е проверен за наличие на зловреден код!";
                    break;
                case MalwareScanErrorReasonEnum.EDeliveryError:
                    this.Message = "Файлът не може да бъде качен на сървъра!" +
                        " Моля, опитайте по-късно..";
                    break;
                case MalwareScanErrorReasonEnum.ServiceResultPending:
                    this.Message = "Липсва отговор от антивирусна компонента!" +
                        " Документът не е проверен за наличие на зловреден код!";
                    break;
                case MalwareScanErrorReasonEnum.ServiceReturnedError:
                    this.Message = "Грешка! Документът не е проверен за наличие на зловреден код!" +
                        " Това не пречи документа да бъде изпратен непроверен!";
                    break;
            }
        }

        public MalwareScanSettings(Evaluation malwareScanResult, bool isSuccessfulScan, bool isMalicious, string malwareId)
            : this(malwareScanResult)
        {
            this.IsSuccessfulScan = isSuccessfulScan;
            this.IsMalicious = isMalicious;
            this.MalwareId = malwareId;
        }

        public MalwareScanSettings(Evaluation malwareScanResult)
            : this()
        {
            if (malwareScanResult == null)
            {
                this.Status = (byte)EvaluationStatus.Error;
                this.Message = MalwareScanErrorReasonEnum.ApiNotAccessible.ToString();
                return;
            }

            this.ElapsedTimeSeconds = (decimal)malwareScanResult.ElapsedTime?.TotalSeconds;

            if (malwareScanResult.Files?.Any() == true)
            {
                this.Status = (byte)malwareScanResult.Files[0].Status;
                this.IsMalicious = malwareScanResult.Files[0].Malicious;
                this.StatusDate = malwareScanResult.Files[0].StatusDate;
                this.Message = malwareScanResult.Files[0].Message;
                this.InnerMessage = this.Message;
                return;
            }

            this.Status = (byte)malwareScanResult.Status;
            this.IsMalicious = malwareScanResult.Malicious;
            this.StatusDate = malwareScanResult.StatusDate;
        }
    }
}
