using EDelivery.SEOS.Utils;
using System;
using System.Configuration;
using System.Net.Http;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using Microsoft.Extensions.DependencyInjection;
using Polly;

namespace EDelivery.SEOS.MalwareService
{
    public class MalwareServiceClientFactory
    {
        private static bool allowUntrustedCertificates = false;

        private static readonly Lazy<IServiceProvider> MalwareServiceProvider =
            new Lazy<IServiceProvider>(
                () =>
                {
                    var services = new ServiceCollection();

                    X509Certificate2 malwareServiceCert = CertificateHelper.SEOSCertificate;

                    services
                        .AddHttpClient<MalwareServiceClient>(
                            (client) =>
                            {
                                client.BaseAddress =
                                    new Uri(System.Web.Configuration.WebConfigurationManager.AppSettings["SEOS.MalwareApiUrl"]);

                                client.DefaultRequestHeaders.Add("Accept", "application/json");
                            })
                        .ConfigurePrimaryHttpMessageHandler(
                            () =>
                            {
                                var handler = new HttpClientHandler();

                                if (malwareServiceCert != null)
                                {
                                    handler.ClientCertificates.Add(malwareServiceCert);

                                    if (allowUntrustedCertificates)
                                    {
                                        handler.ServerCertificateCustomValidationCallback =
                                            HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
                                    }
                                }

                                return handler;
                            })
                        .AddTransientHttpErrorPolicy(
                            p => p.WaitAndRetryAsync(3, _ => TimeSpan.FromMilliseconds(600)));

                    return services.BuildServiceProvider();
                },
                LazyThreadSafetyMode.ExecutionAndPublication);

        public static MalwareServiceClient CreateClient()
        {
            return MalwareServiceProvider.Value.GetRequiredService<MalwareServiceClient>();
        }
    }
}
