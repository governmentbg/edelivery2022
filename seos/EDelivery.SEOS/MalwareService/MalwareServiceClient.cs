using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http.Extensions;
using Newtonsoft.Json;

namespace EDelivery.SEOS.MalwareService
{
    public class MalwareServiceClient
    {
        private readonly HttpClient httpClient;

        public MalwareServiceClient(HttpClient httpClient)
        {
            this.httpClient = httpClient;
        }

        /// <summary>Submits a file for evaluation.</summary>
        /// <param name="fileStream">The data stream of the file to evaluate</param>
        /// <param name="fileName">The filename of the file to evaluate</param>
        /// <param name="correlationID">The correlation ID</param>
        /// <returns>The ID of the evaluation</returns>
        /// <exception cref="MalwareServiceClientException">
        /// A server side error occurred.
        /// </exception>
        /// <param name="ct">Cancellation token</param>
        public async Task<string> SubmitAsync(
            Stream fileStream,
            string fileName,
            string correlationID,
            CancellationToken ct)
        {
            var query = new QueryBuilder();
            if (!string.IsNullOrEmpty(correlationID))
            {
                query.Add("correlationID", correlationID);
            }

            using var multipartFormDataContent = new MultipartFormDataContent();
            using var streamContent = new StreamContent(fileStream);
            multipartFormDataContent.Add(streamContent, "file", fileName);

            var resp = await httpClient.PostAsync(
                "/eval" + query.ToString(),
                multipartFormDataContent,
                ct);

            string body = await resp.Content.ReadAsStringAsync();

            if (resp.IsSuccessStatusCode)
            {
                var malwareScanId = JsonConvert.DeserializeObject<string>(body);

                if (malwareScanId == null)
                {
                    throw new MalwareServiceClientException(
                        "MalwareScanId is null.",
                        (int)resp.StatusCode,
                        body,
                        null);
                }

                return malwareScanId;
            }
            else
            {
                HttpStatusCode status = resp.StatusCode;
                string message = resp.StatusCode switch
                {
                    HttpStatusCode.Conflict => "An evaluation with a duplicate correlation ID has been submitted.",
                    HttpStatusCode.Unauthorized => "Authentication is required and/or has failed.",
                    HttpStatusCode.Forbidden => "The user is not permitted to perform this operation.",
                    HttpStatusCode.InternalServerError => "An internal error has occurred.",
                    _ => "The HTTP status code of the response was not expected",
                };

                throw new MalwareServiceClientException(
                    message,
                    (int)resp.StatusCode,
                    body,
                    null);
            }
        }

        /// <summary>Gets an evaluation with a specified ID.</summary>
        /// <param name="id">The ID of the evaluation</param>
        /// <returns>The evaluation</returns>
        /// <exception cref="MalwareServiceClientException">
        /// A server side error occurred.
        /// </exception>
        /// <param name="ct">Cancellation token.</param>
        public async Task<Evaluation> GetAsync(string id, CancellationToken ct)
        {
            var resp = await httpClient.GetAsync(
                $"/eval/{id}",
                ct);

            string body = await resp.Content.ReadAsStringAsync();

            if (resp.IsSuccessStatusCode)
            {
                try
                {
                    var evaluation = JsonConvert.DeserializeObject<Evaluation>(body);

                    if (evaluation == null)
                    {
                        throw new MalwareServiceClientException(
                            "Evaluation is null.",
                            (int)resp.StatusCode,
                            body,
                            null);
                    }

                    return evaluation;
                }
                catch (Exception ex)
                {
                    throw new MalwareServiceClientException(
                        "Could not deserialize the response body.",
                        (int)resp.StatusCode,
                        body,
                        ex);
                }
            }
            else
            {
                string message = resp.StatusCode switch
                {
                    HttpStatusCode.NotFound => "An evaluation with the specified ID could not be found.",
                    HttpStatusCode.Unauthorized => "Authentication is required and/or has failed.",
                    HttpStatusCode.Forbidden => "The user is not permitted to perform this operation.",
                    HttpStatusCode.InternalServerError => "An internal error has occurred.",
                    _ => "The HTTP status code of the response was not expected",
                };

                throw new MalwareServiceClientException(
                    message,
                    (int)resp.StatusCode,
                    body,
                    null);
            }
        }

        /// <summary>Gets an evaluation file with a specified SHA-256 hash.</summary>
        /// <param name="hash">The SHA-256 hash of the file</param>
        /// <returns>The evaluation file</returns>
        /// <exception cref="MalwareServiceClientException">
        /// A server side error occurred.
        /// </exception>
        /// <param name="ct">Cancellation token.</param>
        public async Task<EvaluationFile> FileBySha256Async(
            string hash,
            CancellationToken ct)
        {
            var resp = await httpClient.GetAsync(
                $"/eval/file/sha256/{hash}",
                ct);

            string body = await resp.Content.ReadAsStringAsync();

            if (resp.IsSuccessStatusCode)
            {
                try
                {
                    var evaluationFile = JsonConvert.DeserializeObject<EvaluationFile>(body);

                    if (evaluationFile == null)
                    {
                        throw new MalwareServiceClientException(
                            "EvaluationFile is null.",
                            (int)resp.StatusCode,
                            body,
                            null);
                    }

                    return evaluationFile;
                }
                catch (Exception ex)
                {
                    throw new MalwareServiceClientException(
                        "Could not deserialize the response body.",
                        (int)resp.StatusCode,
                        body,
                        ex);
                }
            }
            else
            {
                string message = resp.StatusCode switch
                {
                    HttpStatusCode.NotFound => "An evaluation file with the specified SHA-256 hash could not be found.",
                    HttpStatusCode.Unauthorized => "Authentication is required and/or has failed.",
                    HttpStatusCode.Forbidden => "The user is not permitted to perform this operation.",
                    HttpStatusCode.InternalServerError => "An internal error has occurred.",
                    _ => "The HTTP status code of the response was not expected",
                };

                throw new MalwareServiceClientException(
                    message,
                    (int)resp.StatusCode,
                    body,
                    null);
            }
        }
    }
}
