@page "/templates/create/{CopyFromTemplateId:int?}"
@page "/templates/edit/{EditTemplateId:int?}"
@attribute [Authorize]

@using ED.AdminPanel.Blazor.Pages.Templates.Components.Preview
@using ED.AdminPanel.Blazor.Pages.Templates.Components.Models

<Breadcrumb Items="@(
    new Dictionary<string, string>()
    {
        { "home", "" },
        { "templates", "templates" },
        { EditTemplateId.HasValue ? "edit" : "create", null },
    })" />

<div class="wrapper content-wrapper">
    <div class="cols-wrapper">
        <NavMenu />
        <div class="content-right">
            <h3>@Localizer["Title"]</h3>

            @if (model != null && loginSecurityLevels != null && responseTemplates != null)
            {
                <EditForm Model="@model" OnValidSubmit="SaveAsync">
                    <DataAnnotationsValidator />
                    <div class="single-col">
                        <section class="form-section">
                            <ul class="col-list">
                                <li class="form-row">
                                    <label for="Name">@Localizer["Name"]<span class="txt-red">*</span></label>
                                    <div class="form-element">
                                        <InputText type="text" id="Name" @bind-Value="model.Name" />
                                        <ValidationMessage For="@(() => model.Name)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="IdentityNumber">@Localizer["IdentityNumber"]<span class="txt-red">*</span></label>
                                    <div class="form-element">
                                        <InputText type="text" id="IdentityNumber" @bind-Value="model.IdentityNumber" />
                                        <ValidationMessage For="@(() => model.IdentityNumber)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label></label>
                                    <div class="form-element">
                                        <InputCheckbox id="IsSystemTemplate" @bind-Value="model.IsSystemTemplate" />
                                        <label for="IsSystemTemplate" style="width: 100%;">@Localizer["IsSystemTemplate"]</label>
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="ResponseTemplateId">@Localizer["ResponseTemplateId"]</label>
                                    <div class="form-element">
                                        <Select2Field id="ResponseTemplateId"
                                                      @bind-Value="model.ResponseTemplateId"
                                                      Options="@responseTemplates" />
                                        <ValidationMessage For="@(() => model.ResponseTemplateId)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="ReadLoginSecurityLevelId">@Localizer["ReadLoginSecurityLevelId"]<span class="txt-red">*</span></label>
                                    <div class="form-element">
                                        <Select2Field id="ReadLoginSecurityLevelId"
                                                      @bind-Value="model.ReadLoginSecurityLevelId"
                                                      Options="@loginSecurityLevels" />
                                        <ValidationMessage For="@(() => model.ReadLoginSecurityLevelId)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="WriteLoginSecurityLevelId">@Localizer["WriteLoginSecurityLevelId"]<span class="txt-red">*</span></label>
                                    <div class="form-element">
                                        <Select2Field id="WriteLoginSecurityLevelId"
                                                      @bind-Value="model.WriteLoginSecurityLevelId"
                                                      Options="@loginSecurityLevels" />
                                        <ValidationMessage For="@(() => model.WriteLoginSecurityLevelId)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="BlobId">@Localizer["BlobId"]<span class="txt-red">*</span></label>
                                    <div class="form-element">
                                        <BlobField id="BlobId"
                                                   Type="@FileType.Template"
                                                   @bind-Value="model.BlobValue"
                                                   AllowedFileTypes="@(new string[] { ".pdf" })" />
                                        <ValidationMessage For="() => model.BlobValue" />
                                    </div>
                                </li>
                            </ul>
                        </section>

                        <section class="form-section">
                            <ul class="col-list">
                                <li class="form-row">
                                    <label for="SenderDocumentField">@Localizer["FormSenderDocumentField"]</label>
                                    <div class="form-element">
                                        <InputText type="text" id="SenderDocumentField" @bind-Value="model.SenderDocumentField" />
                                        <ValidationMessage For="@(() => model.SenderDocumentField)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="RecipientDocumentField">@Localizer["FormRecipientDocumentField"]</label>
                                    <div class="form-element">
                                        <InputText type="text" id="RecipientDocumentField" @bind-Value="model.RecipientDocumentField" />
                                        <ValidationMessage For="@(() => model.RecipientDocumentField)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="SubjectDocumentField">@Localizer["FormSubjectDocumentField"]</label>
                                    <div class="form-element">
                                        <InputText type="text" id="SubjectDocumentField" @bind-Value="model.SubjectDocumentField" />
                                        <ValidationMessage For="@(() => model.SubjectDocumentField)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="DateSentDocumentField">@Localizer["FormDateSentDocumentField"]</label>
                                    <div class="form-element">
                                        <InputText type="text" id="DateSentDocumentField" @bind-Value="model.DateSentDocumentField" />
                                        <ValidationMessage For="@(() => model.DateSentDocumentField)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="DateReceivedDocumentField">@Localizer["FormDateReceivedDocumentField"]</label>
                                    <div class="form-element">
                                        <InputText type="text" id="DateReceivedDocumentField" @bind-Value="model.DateReceivedDocumentField" />
                                        <ValidationMessage For="@(() => model.DateReceivedDocumentField)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="SenderSignatureDocumentField">@Localizer["FormSenderSignatureDocumentField"]</label>
                                    <div class="form-element">
                                        <InputText type="text" id="SenderSignatureDocumentField" @bind-Value="model.SenderSignatureDocumentField" />
                                        <ValidationMessage For="@(() => model.SenderSignatureDocumentField)" />
                                    </div>
                                </li>
                                <li class="form-row">
                                    <label for="RecipientSignatureDocumentField">@Localizer["FormRecipientSignatureDocumentField"]</label>
                                    <div class="form-element">
                                        <InputText type="text" id="RecipientSignatureDocumentField" @bind-Value="model.RecipientSignatureDocumentField" />
                                        <ValidationMessage For="@(() => model.RecipientSignatureDocumentField)" />
                                    </div>
                                </li>
                            </ul>
                        </section>

                        <section class="form-section">
                            <button class="btn-light btn-l"
                                    type="button"
                                    @onclick="async () => await AddFieldAsync(ComponentType.textfield)">
                                + @Localizer["TextField"]
                            </button>
                            <button class="btn-light btn-l"
                                    type="button"
                                    @onclick="async () => await AddFieldAsync(ComponentType.textarea)">
                                + @Localizer["TextAreaField"]
                            </button>
                            <button class="btn-light btn-l"
                                    type="button"
                                    @onclick="async () => await AddFieldAsync(ComponentType.select)">
                                + @Localizer["SelectField"]
                            </button>
                            <button class="btn-light btn-l"
                                    type="button"
                                    @onclick="async () => await AddFieldAsync(ComponentType.datetime)">
                                + @Localizer["DateTimeField"]
                            </button>
                            <button class="btn-light btn-l"
                                    type="button"
                                    @onclick="async () => await AddFieldAsync(ComponentType.checkbox)">
                                + @Localizer["CheckboxField"]
                            </button>
                            <button class="btn-light btn-l"
                                    type="button"
                                    @onclick="async () => await AddFieldAsync(ComponentType.hidden)">
                                + @Localizer["HiddenField"]
                            </button>
                            <button class="btn-light btn-l"
                                    type="button"
                                    @onclick="async () => await AddFieldAsync(ComponentType.file)">
                                + @Localizer["FileField"]
                            </button>
                        </section>

                        <section class="form-section">
                            @if (model.Content.Count == 0)
                            {
                                <p>@Localizer["NoItems"]</p>
                            }
                            else
                            {
                                <ul class="col-list">
                                    @foreach (var item in model.Content)
                                    {
                                        <li @key="item.Id" class="form-row">
                                            <button type="button" @onclick="async () => await EditFieldAsync(item)">
                                                <img src="img/more-info-icon.png" />
                                            </button>
                                            <button type="button" @onclick="() => RemoveField(item)">
                                                <img src="img/trash-icon.png" />
                                            </button>

                                            <FieldPreview Model="@item" />
                                        </li>
                                    }
                                </ul>
                            }
                        </section>

                        <section class="form-section form-row button-row-right">
                            <a class="btn btn-border btn-l"
                               href="@($"templates{(EditTemplateId.HasValue ? $"/{EditTemplateId.Value}" : string.Empty)}")">
                                @Localizer["Cancel"]
                            </a>
                            <button class="btn-primary btn-l" type="submit">@Localizer["Submit"]</button>
                        </section>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>
