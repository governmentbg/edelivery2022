using System;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

namespace MalwareServiceStub
{
    [ApiController]
    public class OrnServiceController : ControllerBase
    {
        static SingleOrnResponse OrnCache = new()
        {
            ReturnCode = "200",
            DescriptionCode = "OK",
            Orn = "BGEM11115H0",
        };

        public class BaseResponse
        {
            [JsonPropertyName("return_code")]
            public string ReturnCode { get; set; } = null!;

            [JsonPropertyName("description_code")]
            public string DescriptionCode { get; set; } = null!;
        }

        public class SingleOrnResponse : BaseResponse
        {
            public string Orn { get; set; } = null!;
        }

        public class MultipleOrnResponse : BaseResponse
        {
            [JsonPropertyName("orn_array")]
            public string[] Orns { get; set; } = null!;
        }

        public class IdTypesResponse : BaseResponse
        {
            [JsonPropertyName("idtype_array")]
            public string[] IdTypes { get; set; } = null!;
        }


        [HttpGet("WebServiceUniqueNumber/rest/orn/{count:int}")]
        public virtual IActionResult GetNumberOfOrns(
            [FromQuery(Name = "bulstat"), Required] string bulstat,
            [FromQuery(Name = "id_type"), Required] string idType,
            [FromQuery(Name = "uri_service"), Required] string uriService,
            [FromQuery(Name = "oid_system"), Required] string oidSystem,
            [FromRoute] int number)
        {
            long ticks = DateTime.Now.Ticks;
            string[] orns = Enumerable.Range(1, number)
                .Select(e => $"BGEM{ticks}{e}")
                .ToArray();

            MultipleOrnResponse resp = new()
            {
                ReturnCode = "200",
                DescriptionCode = "OK",
                Orns = orns,
            };

            return this.Ok(resp);
        }

        [HttpGet("WebServiceUniqueNumber/rest/orn")]
        public virtual IActionResult GetOrn(
            [FromQuery(Name = "bulstat"), Required] string bulstat,
            [FromQuery(Name = "id_type"), Required] string idType,
            [FromQuery(Name = "uri_service"), Required] string uriService,
            [FromQuery(Name = "oid_system"), Required] string oidSystem)
        {
            SingleOrnResponse resp = new()
            {
                ReturnCode = "200",
                DescriptionCode = "OK",
                Orn = $"BGEM{DateTime.Now.Ticks}",
            };

            OrnCache = resp;

            return this.Ok(resp);
        }

        [HttpGet]
        [Route("/WebServiceUniqueNumber/rest/orn/test")]
        public virtual IActionResult Test()
        {
            return this.Ok(OrnCache);
        }

        [HttpGet("WebServiceUniqueNumber/rest/orn/id_type")]
        public virtual IActionResult GetIdTypes()
        {
            IdTypesResponse resp = new()
            {
                ReturnCode = "200",
                DescriptionCode = "OK",
                IdTypes = new string[]
                {
                    "EServices (Електронна услуга)",
                    "EDocuments (Електронен документ)",
                    "EMessages (Електронно писмо)",
                    "ETaxes (Електронна такса)",
                    "EdutIes (Електронно задължение)"
                }
            };

            return this.Ok(resp);
        }
    }
}
