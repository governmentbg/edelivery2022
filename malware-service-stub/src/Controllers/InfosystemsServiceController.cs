using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System.Threading;
using System;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;

namespace MalwareServiceStub
{
    [ApiController]
    public class InfosystemsServiceController
    {
        private const int ViberAndSmsScenarioId = 54; // provided from infosystems
        private const int SmsScenarioId = 55; // provided from infosystems
        private const int ViberScenarioId = 56; // provided from infosystems

        private const int ViberAndSmsPriority = 1;
        private const int SmsPriority = 1;
        private const int ViberPriority = 1;

        private const int Validity = 1440;

        private const int ClientId = 42; // provided from infosystems

        private const string StatusNotDelivered = "Not Delivered";

        [HttpPost]
        [Route("/public/v1/send-single/")]
        public async Task<ActionResult<MessageResponse>> PostSmsViberAsync(
            [FromServices] IHttpContextAccessor httpContextAccessor,
            [FromServices] ILogger<InfosystemsServiceController> logger,
            CancellationToken ct)
        {
            var httpContext = httpContextAccessor.HttpContext!;
            var request = httpContext.Request;
            MessageResponse result;

            try
            {
                var jsonRequest = await RequestHelper.GetSmsRequest(request, logger, ct);

                if (jsonRequest == null ||
                    jsonRequest.message == null)
                {
                    result = new MessageResponse
                    {
                        status = "ResponseCode(D05): Empty or invalid message content"
                    };

                    RequestHelper.LogJson(
                        "Response send message",
                        result,
                        logger);

                    return result;
                }

                if (jsonRequest.sid != ViberAndSmsScenarioId &&
                    jsonRequest.sid != SmsScenarioId &&
                    jsonRequest.sid != ViberScenarioId)
                {
                    result = new MessageResponse
                    {
                        status = "ResponseCode(D03): Invalid scenario ID or scenario does not exist"
                    };

                    RequestHelper.LogJson(
                        "Response send message",
                        result,
                        logger);

                    return result;
                }

                if (jsonRequest.sid == ViberAndSmsScenarioId)
                {
                    //ViberAndSmsScenarioId

                    if (jsonRequest.message.viber == null ||
                        String.IsNullOrEmpty(jsonRequest.message.viber.text) ||
                        jsonRequest.message.sms == null ||
                        String.IsNullOrEmpty(jsonRequest.message.sms.text))
                    {
                        result = new MessageResponse
                        {
                            status = "ResponseCode(D05): Empty or invalid message content"
                        };

                        RequestHelper.LogJson(
                            "Response send message",
                            result,
                            logger);

                        return result;
                    }
                }

                if (jsonRequest.sid == SmsScenarioId)
                {
                    //SmsScenarioId

                    if (jsonRequest.message.sms == null ||
                        String.IsNullOrEmpty(jsonRequest.message.sms.text))
                    {
                        result = new MessageResponse
                        {
                            status = "ResponseCode(D05): Empty or invalid message content"
                        };

                        RequestHelper.LogJson(
                            "Response send message",
                            result,
                            logger);

                        return result;
                    }
                }

                if (jsonRequest.sid == ViberScenarioId)
                {
                    //ViberScenarioId

                    if (jsonRequest.message.viber == null ||
                        String.IsNullOrEmpty(jsonRequest.message.viber.text))
                    {
                        result = new MessageResponse
                        {
                            status = "ResponseCode(D05): Empty or invalid message content"
                        };

                        RequestHelper.LogJson(
                            "Response send message",
                            result,
                            logger);

                        return result;
                    }
                }

                if (jsonRequest.cid != ClientId)
                {
                    result = new MessageResponse
                    {
                        status = "ResponseCode(D01): Invalid client ID"
                    };

                    RequestHelper.LogJson(
                            "Response send message",
                            result,
                            logger);

                    return result;
                }

                result = new MessageResponse
                {
                    msgId = RequestHelper.MessageId(),
                    status = "ResponseCode(A01): Message accepted"
                };

                RequestHelper.LogJson(
                    "Response send message", 
                    result, 
                    logger);

                return result;
            }
            catch (OperationCanceledException)
            {
                return new NoContentResult();
            }
        }

        [HttpGet("/public/v1/report")]
        public ActionResult<DeliveryError> GetSmsViberDeliveryAsync(
            [FromQuery(Name = "msgId"), Required] int msgId,
            [FromQuery(Name = "clientId"), Required] int clientId,
            [FromServices] ILogger<InfosystemsServiceController> logger)
        {
            RequestHelper.LogJson(
                "Request check status", 
                new { MessageId = msgId, ClientId = clientId }, 
                logger);

            DeliveryError result;

            if (RequestHelper.HasError())
            {
                result = new DeliveryError
                {
                    error = "ResponseCode(D08): Message ID invalid or does not exist"
                };

                RequestHelper.LogJson(
                    "Response check status", 
                    result, 
                    logger);

                return result;
            }


            var scenarioId = RequestHelper.ScenarioId();

            var msgIdSufix = msgId % 100;
            if (msgIdSufix == ViberAndSmsScenarioId || 
                msgIdSufix == SmsScenarioId || 
                msgIdSufix == ViberScenarioId)
                scenarioId = msgIdSufix;

            var phoneNumber = RequestHelper.PhoneNumber();
            var hasViber = RequestHelper.HasViber();
            var hasError = RequestHelper.HasError();
            var deliveryMessage = RequestHelper.DeliveryMessage;
            var errorMessage = RequestHelper.GetDeliveryErrorMessage();
            var smsParts = RequestHelper.SmsParts();

            switch (scenarioId)
            {
                case ViberAndSmsScenarioId:
                    result = new DeliveryResponse
                    {
                        id = msgId,
                        receivedAt = DateTime.Now,
                        messages = hasViber?
                        new DeliveryMessage[]
                        {
                            new DeliveryMessage
                            {
                                channel = "VIBER",
                                charge = hasError ? false : true,
                                messageParts = 1,
                                processedAt = DateTime.Now,
                                status = hasError ? errorMessage.Message : deliveryMessage.Message,
                                statusCode = hasError ? errorMessage.Code : deliveryMessage.Code,
                                doneAt = DateTime.Now,
                            }
                        }:
                        new DeliveryMessage[]
                        {
                            new DeliveryMessage
                            {
                                channel = "SMS",
                                charge = hasError ? false : true,
                                messageParts = smsParts,
                                processedAt = DateTime.Now,
                                status = hasError ? errorMessage.Message : deliveryMessage.Message,
                                statusCode = hasError ? errorMessage.Code : deliveryMessage.Code,
                                doneAt = DateTime.Now,
                            },
                            new DeliveryMessage
                            {
                                channel = "VIBER",
                                charge = false,
                                messageParts = 1,
                                processedAt = DateTime.Now,
                                status = StatusNotDelivered,
                                statusCode = 101,
                                doneAt = DateTime.Now,
                            }
                        },
                        recipient = new Recipient
                        {
                            msisdn = phoneNumber
                        },
                        cid = clientId,
                        sid = scenarioId,
                        validity = Validity,
                        priority = ViberAndSmsPriority,
                        sendAt = DateTime.Now
                    };
                    break;
                case SmsScenarioId:
                    result = new DeliveryResponse
                    {
                        id = msgId,
                        receivedAt = DateTime.Now,
                        messages = new DeliveryMessage[]
                        {
                            new DeliveryMessage
                            {
                                channel = "SMS",
                                charge = hasError ? false : true,
                                messageParts = smsParts,
                                processedAt = DateTime.Now,
                                status = hasError ? errorMessage.Message : deliveryMessage.Message,
                                statusCode = hasError ? errorMessage.Code : deliveryMessage.Code,
                                doneAt = DateTime.Now,
                            }
                        },
                        recipient = new Recipient
                        {
                            msisdn = phoneNumber
                        },
                        cid = clientId,
                        sid = scenarioId,
                        validity = Validity,
                        priority = SmsPriority,
                        sendAt = DateTime.Now
                    };
                    break;
                case ViberScenarioId:
                    result = new DeliveryResponse
                    {
                        id = msgId,
                        receivedAt = DateTime.Now,
                        messages = new DeliveryMessage[]
                        {
                            new DeliveryMessage
                            {
                                channel = "VIBER",
                                charge = hasError ? false : true,
                                messageParts = 1,
                                processedAt = DateTime.Now,
                                status = hasError ? errorMessage.Message : deliveryMessage.Message,
                                statusCode = hasError ? errorMessage.Code : deliveryMessage.Code,
                                doneAt = DateTime.Now,
                            }
                        },
                        recipient = new Recipient
                        {
                            msisdn = phoneNumber
                        },
                        cid = clientId,
                        sid = scenarioId,
                        validity = Validity,
                        priority = ViberPriority,
                        sendAt = DateTime.Now
                    };
                    break;
                default:
                    result = new DeliveryError
                    {
                        error = "ResponseCode(D03): Invalid scenario ID or scenario does not exist"
                    };
                    break;
            }

            RequestHelper.LogJson(
                "Response check status", 
                result, 
                logger);

            return result;
        }
    }
}
