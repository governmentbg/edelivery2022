using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System;
using Microsoft.AspNetCore.Http;
using System.Threading;
using System.Security.Cryptography;
using Microsoft.Extensions.Logging;
using System.Text.Encodings.Web;
using System.Text.Unicode;

namespace MalwareServiceStub
{
    public static class RequestHelper
    {
        public static async Task<MessageRequest?> GetSmsRequest(
            HttpRequest request,
            ILogger<InfosystemsServiceController> logger,
            CancellationToken ct)
        {
            var text = new StringBuilder();
            int length = 0;
            byte[] buff = new byte[1024];
            Memory<byte> memory = new(buff);

            while ((length = await request.Body.ReadAsync(memory, ct)) > 0)
            {
                text.Append(Encoding.UTF8.GetString(memory.ToArray(), 0, length));
            }

            MessageRequest? jsonRequest = JsonSerializer
                .Deserialize<MessageRequest>(text.ToString());

            LogJson("Request send message", jsonRequest, logger);

            return jsonRequest;
        }

        public static void LogJson(
            string text,
            object? item,
            ILogger<InfosystemsServiceController> logger)
        {
            if (item == null)
                return;

            var jsonOptions = new JsonSerializerOptions
            {
                Encoder = JavaScriptEncoder.Create(UnicodeRanges.BasicLatin, UnicodeRanges.Cyrillic),
                WriteIndented = true
            };

            var jsonStr = JsonSerializer
                .Serialize(item, item.GetType(), jsonOptions);

            logger.LogInformation($"{Environment.NewLine}{text}:{Environment.NewLine}{jsonStr}");
        }

        public static int MessageId()
        {
            return RandomNumberGenerator.GetInt32(50000000, 100000000);
        }

        public static bool HasError()
        {
            var num = RandomNumberGenerator.GetInt32(1, 1001);
            return num % 3 == 0;
        }

        public static string PhoneNumber()
        {
            StringBuilder number = new();

            for (int i = 0; i < 7; i++)
                number.Append(RandomNumberGenerator.GetInt32(0, 10));

            return $"35988{number}";
        }

        public static int SmsParts()
        {
            return RandomNumberGenerator.GetInt32(1, 11);
        }

        public static int ScenarioId()
        {
            return RandomNumberGenerator.GetInt32(54, 57);
        }

        public static bool HasViber()
        {
            var num = RandomNumberGenerator.GetInt32(1, 1001);
            return num % 2 == 0;
        }

        public static (int Code, string Message) GetDeliveryErrorMessage()
        {
            int number = RandomNumberGenerator.GetInt32(1, 6);

            switch (number)
            {
                case 1:
                    return (200, "Rejected");
                case 2:
                    return (201, "Timedout");
                case 3:
                    return (402, "EmptyMessage");
                case 4:
                    return (403, "Message too long");
                case 5:
                    return (500, "Missing sender for operator or channel");
                default:
                    return (101, "Not Delivered");
            }
        }

        public static (int Code, string Message) DeliveryMessage
        {
            get
            {
                return (100, "Delivered");
            }
        }
    }
}
