using System;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Logging;

namespace ED.Blobs
{
    public class MalwareScanResultWriter
    {
        private readonly MalwareServiceClient malwareServiceClient;
        private readonly ILogger<MalwareScanResultWriter> logger;

        public MalwareScanResultWriter(
            MalwareServiceClient malwareServiceClient,
            ILogger<MalwareScanResultWriter> logger)
        {
            this.malwareServiceClient = malwareServiceClient;
            this.logger = logger;
        }

        public async Task<(MalwareScanStatus status, int malwareScanResultId)> InsertResultAsync(
            SqlConnection connection,
            string malwareScanId,
            CancellationToken ct)
        {
            Evaluation? evaluation = null;
            try
            {
                evaluation = await this.GetEvaluationAsync(malwareScanId, ct);
            }
#pragma warning disable CA1031 // Do not catch general exception types
            catch (Exception ex)
#pragma warning restore CA1031 // Do not catch general exception types
            {
                this.logger.LogError(ex, "GetEvaluationAsync failed");
            }

            byte status;
            DateTime statusDate;
            decimal? elapsedTimeSeconds = null;
            bool? isMalicious = null;
            string? message = null;

            if (evaluation != null)
            {
                elapsedTimeSeconds = (decimal?)evaluation.ElapsedTime?.TotalSeconds;
                if (evaluation.Files?.Any() == true)
                {
                    status = (byte)evaluation.Files[0].Status;
                    isMalicious = evaluation.Files[0].Malicious;
                    statusDate = evaluation.Files[0].StatusDate;
                    message = evaluation.Files[0].Message;
                }
                else
                {
                    status = (byte)evaluation.Status;
                    isMalicious = evaluation.Malicious;
                    statusDate = evaluation.StatusDate;
                }
            }
            else
            {
                status = (byte)EvaluationStatus.Error;
                message = "Malware scan result is null";
                statusDate = DateTime.Now;
            }

            await using SqlCommand cmd = connection.CreateCommand();

            cmd.CommandText =
                $@"INSERT INTO [dbo].[MalwareScanResult] (
                    [MalwareId], 
                    [Status],
                    [StatusDate],
                    [ElapsedTimeSeconds],
                    [IsMalicious],
                    [Message]
                )
                OUTPUT inserted.[Id]
                VALUES (
                    @malwareId,
                    @status,
                    @statusDate,
                    @elapsedTimeSeconds,
                    @isMalicious,
                    @message
                )";
            cmd.Parameters.AddRange(
                new SqlParameter[]
                {
                    new SqlParameter("malwareId", SqlDbType.NVarChar, 100)
                    {
                        Value = (object?)evaluation?.Id ?? DBNull.Value
                    },
                    new SqlParameter("status", SqlDbType.TinyInt)
                    {
                        Value = status
                    },
                    new SqlParameter("statusDate", SqlDbType.DateTime)
                    {
                        Value = statusDate
                    },
                    new SqlParameter("elapsedTimeSeconds", SqlDbType.Decimal)
                    {
                        Value = (object?)elapsedTimeSeconds ?? DBNull.Value,
                        Precision = 18,
                        Scale = 2
                    },
                    new SqlParameter("isMalicious", SqlDbType.Bit)
                    {
                        Value = (object?)isMalicious ?? DBNull.Value
                    },
                    new SqlParameter("message", SqlDbType.NVarChar, 255)
                    {
                        Value = (object?)message ?? DBNull.Value
                    }
                });

            int malwareScanResultId = (int)await cmd.ExecuteScalarAsync(ct);
            MalwareScanStatus malwareScanStatus = this.GetMalwareScanStatus(evaluation);

            return (malwareScanStatus, malwareScanResultId);
        }

        private MalwareScanStatus GetMalwareScanStatus(Evaluation? eval)
        {
            if (eval?.Status == EvaluationStatus.Complete
                || (eval?.Files?.Length > 0 && eval.Files[0].Status == EvaluationStatus.Complete))
            {
                bool isMalicious =
                    (eval.Files?.Length > 0
                    ? eval.Files[0].Malicious
                    : eval.Malicious)
                    ?? false;

                return isMalicious
                    ? MalwareScanStatus.IsMalicious
                    : MalwareScanStatus.NotMalicious;
            }
            else
            {
                return MalwareScanStatus.NotSure;
            }
        }

        private async Task<Evaluation> GetEvaluationAsync(
            string malwareScanId,
            CancellationToken ct)
        {
            // TODO: rewrite with Polly or smth similar
            // naive code taken from the old implementation

            Evaluation? result = null;
            var counter = 5;
            while (counter > 0)
            {
                result = await this.malwareServiceClient.GetAsync(malwareScanId, ct);

                if (result.Status != EvaluationStatus.InProgress ||
                    (result.Files != null && result.Files[0].Status != EvaluationStatus.InProgress))
                {
                    break;
                }

                counter--;
                if (counter > 0)
                {
                    await Task.Delay((5 - counter) * 1000, ct);
                }
            }
            return result!;
        }
    }
}
