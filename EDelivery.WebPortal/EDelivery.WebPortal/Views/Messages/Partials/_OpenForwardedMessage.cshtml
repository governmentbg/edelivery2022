@using EDelivery.WebPortal.Utils
@using EDelivery.WebPortal.Models.Messages
@using EDelivery.WebPortal.Models.Templates.Components
@using EDelivery.WebPortal.Extensions

@model ReadMessageViewModel

@{
    var userData = Context.GetCachedUserData();
}

<section class="form-section">
    <h3>@ProfilePage.ForwardedMessage</h3>

    <table class="blank-list message">
        <tbody>
            <tr>
                <td>@ProfilePage.LabelMessageSender:</td>
                <td>
                    <a href="#" data-modal-href="@Url.Action("MessageProfileInfo", "Messages", new { messageId = Model.MessageId })">
                        @Model.Sender.Name
                    </a>
                </td>
            </tr>
            <tr>
                <td>@ProfilePage.LabelMessageTitle:</td>
                <td>@Model.Subject</td>
            </tr>
            <tr>
                <td>@ProfilePage.LabelMessageSentOn</td>
                <td>
                    @Model.DateSent.ToString(SystemConstants.DateTimeFormat)
                    <a href="@Url.Action("GetMessageTimestamp", "Messages", new { id = Model.MessageId, timeStampType = EDelivery.WebPortal.Enums.eTimeStampType.NRO })"
                       data-toggle="tooltip"
                       data-original-title="@ProfilePage.TooltipDownloadNRO">
                        <img src="~/Content/img/timestamp.png">
                    </a>
                </td>
            </tr>

            <tr>
                <td>Шаблон</td>
                <td><strong>@Model.TemplateName</strong></td>
            </tr>
            <tr>
                <td colspan="2">
                    <hr class="section-border" />
                </td>
            </tr>

            @{
                var activeProfileId = userData.ActiveProfileId;
            }
            @foreach (var item in Model.Fields)
            {
                switch (item.Value.Type)
                {
                    case ComponentType.textfield:
                    case ComponentType.select:
                    case ComponentType.textarea:
                    case ComponentType.datetime:
                    case ComponentType.hidden:
                        <tr>
                            <td>@item.Value.Label</td>
                            <td>@item.Value.Value</td>
                        </tr>
                        break;
                    case ComponentType.checkbox:
                        <tr>
                            <td>@item.Value.Label</td>
                            <td>
                            <td>
                                <div class="form-group disabled" style="margin: 0px;">
                                    @Html.CheckBox("cb1", (bool)item.Value.Value, new { disabled = "disabled" })
                                    <label>&nbsp;</label>
                                </div>
                            </td>
                        </tr>
                        break;
                    case ComponentType.file:
                        <tr>
                            <td>@item.Value.Label</td>
                            <td>
                                @foreach (var fileObject in (FileObject[])item.Value.Value)
                                {
                                    var blob = Model.Blobs.FirstOrDefault(e => e.BlobId == fileObject.FileId)
                                        ?? Model.Blobs.First(e =>
                                            fileObject.FileName.ToUpperInvariant().StartsWith(e.FileName.ToUpperInvariant())
                                            && fileObject.FileHash.ToUpperInvariant().EndsWith(e.Hash.ToUpperInvariant()));

                                    bool isMalicious = false;
                                    string errorMessage = string.Empty;

                                    if (blob.Status != ED.DomainServices.MalwareScanResultStatus.Complete)
                                    {
                                        errorMessage = SEOS.ErrorUnsuccessfulScan;
                                    }
                                    else
                                    {
                                        if (blob.IsMalicious ?? false)
                                        {
                                            errorMessage = SEOS.ErrorReceivedDocumentIsMalicious;
                                            isMalicious = true;
                                        }
                                    }

                                    string blobTimestamp = Url.Action("GetDocumentTimestamp", "Messages", new { id = Model.MessageId, documentId = blob.BlobId });

                                    <div class="td-section">
                                        @if (isMalicious)
                                        {
                                            <span>
                                                @blob.FileName
                                            </span>
                                        }
                                        else
                                        {
                                            <a href="@Url.CreateMessageBlobWebPortalToken(activeProfileId, Model.MessageId, blob.BlobId)" class="file-link" rel="noopener" target="_blank">
                                                @blob.FileName <span class="note"></span>
                                            </a>
                                        }

                                        <a href="@blobTimestamp" data-toggle="tooltip" data-original-title="@ProfilePage.TooltipDocumentTimestamp">
                                            <img src="~/Content/img/timestamp.png">
                                        </a>

                                        @if (!string.IsNullOrEmpty(errorMessage))
                                        {
                                            <span class="warning-message">@errorMessage</span>
                                        }


                                        @if (!string.IsNullOrEmpty(blob.DocumentRegistrationNumber))
                                        {
                                            <span class="additional-message">@blob.DocumentRegistrationNumber</span>
                                        }

                                        @if (blob.Signatures != null && blob.Signatures.Any())
                                        {
                                            for (int i = 0; i < blob.Signatures.Count; i++)
                                            {
                                                var signature = blob.Signatures[i];
                                                var validStatus = signature.CoversDocument && signature.ValidAtTimeOfSigning;

                                                <span class="@(validStatus
                                            ? (signature.IsTimestamp ? "timestamp-signature" : "signature")
                                            : "warning-message")">
                                                    @ProfilePage.SignatureInformation: @EDelivery.WebPortal.Utils.TextHelper.GetSignatureSubjectShortName(signature.Subject)
                                                    &nbsp;
                                                    <a href="#" data-modal-tagId="signatureDataPanel_@(blob.BlobId)_@i">
                                                        @EDeliveryResources.ProfilePage.LinkSignatureDataMore
                                                    </a>
                                                </span>

                                                <div id="signatureDataPanel_@(blob.BlobId)_@i" style="display:none;">
                                                    @Html.Partial("Partials/_OpenDocumentSignatureInfo", signature)
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            </td>
                        </tr>
                        break;
                    case ComponentType.markdown:
                        <tr>
                            <td></td>
                            <td>@Html.MarkdownToHtml(item.Value.Value)</td>
                        </tr>
                        break;
                };
            }
        </tbody>
    </table>
</section>

@if (!userData.ActiveProfile.IsReadOnly)
{
    <section class="form-section form-row button-row-right">
        <a class="btn btn-primary btn-l"
           href="@Url.Action("ChooseReply", "Messages", new { id = Model.MessageId, forwardingMessageId = ViewData["ForwardingMessageId"] })">
            @Common.ButtonReply
        </a>
    </section>
}
