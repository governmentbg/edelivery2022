@using EDelivery.WebPortal.Extensions
@using EDelivery.WebPortal.Utils

@model ListOutboxBlobsViewModel

@{
    var options = new PagedListRenderOptions();
    options.Display = PagedListDisplayMode.IfNeeded;
    options.MaximumPageNumbersToDisplay = 6;
    options.DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded;
    options.DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded;
    options.DisplayLinkToFirstPage = PagedListDisplayMode.Never;
    options.DisplayLinkToLastPage = PagedListDisplayMode.Never;
}

@Html.Partial("Partials/SearchOutboxBlobs", Model.SearchFilter)

<div class="table-responsive" id="listOutboxBlobsTable">
    @Html.CustomPagedListPager(
        Model.Blobs,
        p => Url.Action(
            "Index",
            new
            {
                tab = "outbox",
                Model.SearchFilter.OutboxBlobsFileName,
                Model.SearchFilter.OutboxBlobsMessageSubject,
                Model.SearchFilter.OutboxBlobsFromDate,
                Model.SearchFilter.OutboxBlobsToDate,
                page = p
            }),
        options)

    <table class="statistics">
        <tbody>
            <tr>
                <th>Име на файла</th>
                <th>Дата</th>
                <th>Размер</th>
                <th>Съобщение</th>
                <th></th>
            </tr>

            @if (Model.Blobs.Count == 0)
            {
                <tr>
                    <td colspan="4">
                        @Model.NoBlobsMessage
                    </td>
                </tr>
            }

            @{
                var activeProfileId = Context.GetCachedUserData().ActiveProfileId;
            }
            @foreach (var item in Model.Blobs)
            {
                <tr @*class="newly-added"*@>
                    <td class="file-name elipsis">
                        @if (item.IsNotMalicious)
                        {
                            <a href="@Url.CreateMessageBlobWebPortalToken(activeProfileId, item.MessageId.Value, item.BlobId)"
                               data-toggle="tooltip"
                               data-original-title="@(EDeliveryResources.SEOS.InfoFileIsNotMalicious)"
                               rel="noopener"
                               target="_blank">
                                <img src="~/Content/img/signature-icon.png" />
                                <span>@item.FileName</span>
                            </a>
                        }
                        else if (item.IsNotSure)
                        {
                            <a href="@Url.CreateMessageBlobWebPortalToken(activeProfileId, item.MessageId.Value, item.BlobId)"
                               data-toggle="tooltip"
                               data-original-title="@(EDeliveryResources.SEOS.ErrorUnsuccessfulScan)"
                               rel="noopener"
                               target="_blank">
                                <img src="~/Content/img/neutral-icon.png" />
                                <span>@item.FileName</span>
                            </a>
                        }
                        else if (item.IsMalicious)
                        {
                            <a href="@Url.CreateMessageBlobWebPortalToken(activeProfileId, item.MessageId.Value, item.BlobId)"
                               data-toggle="tooltip"
                               data-original-title="@(EDeliveryResources.SEOS.ErrorReceivedDocumentIsMalicious)"
                               rel="noopener"
                               target="_blank">
                                <img src="~/Content/img/warning-icon.png" />
                                <span>@item.FileName</span>
                            </a>
                        }
                        else
                        {
                            <a href="@Url.CreateMessageBlobWebPortalToken(activeProfileId, item.MessageId.Value, item.BlobId)" rel="noopener" target="_blank">
                                <span>@item.FileName</span>
                            </a>
                        }
                    </td>
                    <td>
                        @item.CreateDate.ToLocalDateTime().ToString(SystemConstants.DateTimeFormat)
                    </td>
                    <td>
                        @EDelivery.WebPortal.Utils.Utils.FormatSize(Convert.ToUInt64(item.Size))
                    </td>
                    <td>
                        <a href="@Url.Action("View", "Messages", new { id = item.MessageId })">
                            @item.MessageSubject
                        </a>
                    </td>
                    <td class="file-actions">
                        <div>
                            <a href="@Url.CreateMessageBlobWebPortalToken(activeProfileId, item.MessageId.Value, item.BlobId)"
                               target="_blank"
                               rel="noopener">
                                <img src="~/Content/img/download-file.png">
                            </a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @Html.CustomPagedListPager(
        Model.Blobs,
        p => Url.Action(
            "Index",
            new
            {
                tab = "outbox",
                Model.SearchFilter.OutboxBlobsFileName,
                Model.SearchFilter.OutboxBlobsMessageSubject,
                Model.SearchFilter.OutboxBlobsFromDate,
                Model.SearchFilter.OutboxBlobsToDate,
                page = p
            }),
        options)
</div>
